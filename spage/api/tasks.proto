syntax = "proto3";

package spage.api;

option go_package = "github.com/AlexanderGrooff/spage-protobuf/spage/api";

import "google/protobuf/empty.proto";
import "spage/core/common.proto";

// SpageAPI service handles communication between the Daemon and the API
service SpageAPI {
  // Task management
  rpc SubmitTask(SubmitTaskRequest) returns (SubmitTaskResponse);
  rpc GetTaskStatus(GetTaskStatusRequest) returns (GetTaskStatusResponse);
  rpc CancelTask(CancelTaskRequest) returns (CancelTaskResponse);
  rpc ListTasks(ListTasksRequest) returns (ListTasksResponse);
  
  // Real-time events
  rpc StreamEvents(stream spage.core.Event) returns (stream spage.core.Event);
  
  // Authentication and authorization
  rpc Authenticate(AuthRequest) returns (AuthResponse);
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
  
  // Health and metrics
  rpc HealthCheck(google.protobuf.Empty) returns (spage.core.HealthStatus);
  rpc GetMetrics(google.protobuf.Empty) returns (spage.core.Metrics);
}

// SubmitTaskRequest represents a request to submit a task
message SubmitTaskRequest {
  string task_id = 1;
  string type = 2;
  spage.core.TaskPriority priority = 3;
  map<string, string> payload = 4;
  map<string, string> metadata = 5;
}

// SubmitTaskResponse represents the response to a submit task request
message SubmitTaskResponse {
  bool success = 1;
  string task_id = 2;
  spage.core.Error error = 3;
}

// GetTaskStatusRequest represents a request to get task status
message GetTaskStatusRequest {
  string task_id = 1;
}

// GetTaskStatusResponse represents the response with task status
message GetTaskStatusResponse {
  spage.core.Task task = 1;
  spage.core.Error error = 2;
}

// CancelTaskRequest represents a request to cancel a task
message CancelTaskRequest {
  string task_id = 1;
  string reason = 2;
}

// CancelTaskResponse represents the response to a cancel task request
message CancelTaskResponse {
  bool success = 1;
  spage.core.Error error = 2;
}

// ListTasksRequest represents a request to list tasks
message ListTasksRequest {
  int32 limit = 1;
  int32 offset = 2;
  string status = 3;
  string type = 4;
}

// ListTasksResponse represents the response with a list of tasks
message ListTasksResponse {
  repeated spage.core.Task tasks = 1;
  int32 total = 2;
  spage.core.Error error = 3;
}

// AuthRequest represents an authentication request
message AuthRequest {
  string api_key = 1;
  string client_id = 2;
  map<string, string> metadata = 3;
}

// AuthResponse represents the response to an authentication request
message AuthResponse {
  bool success = 1;
  string token = 2;
  int64 expires_at = 3;
  map<string, string> permissions = 4;
  spage.core.Error error = 5;
}

// ValidateTokenRequest represents a request to validate a token
message ValidateTokenRequest {
  string token = 1;
}

// ValidateTokenResponse represents the response to a token validation request
message ValidateTokenResponse {
  bool valid = 1;
  string client_id = 2;
  map<string, string> permissions = 3;
  int64 expires_at = 4;
  spage.core.Error error = 5;
} 