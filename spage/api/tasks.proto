syntax = "proto3";

package spage.api;

option go_package = "github.com/AlexanderGrooff/spage-protobuf/spage/api";

import "google/protobuf/empty.proto";
import "spage/core/common.proto";
import "spage/core/plays.proto";

// SpageAPI service handles communication between the Daemon and the API
service SpageAPI {
  // Task management
  rpc SubmitPlay(SubmitPlayRequest) returns (SubmitPlayResponse);
  rpc GetPlayStatus(GetPlayStatusRequest) returns (GetPlayStatusResponse);
  rpc CancelPlay(CancelPlayRequest) returns (CancelPlayResponse);
  rpc ListPlays(ListPlaysRequest) returns (ListPlaysResponse);
  
  // Authentication and authorization
  rpc Authenticate(AuthRequest) returns (AuthResponse);
  rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
  
  // Health and metrics
  rpc HealthCheck(google.protobuf.Empty) returns (spage.core.HealthStatus);
}

// SubmitPlayRequest represents a request to submit a play
message SubmitPlayRequest {
  string play_id = 1;
  string playbook = 2;
  string inventory = 3;
  map<string, string> variables = 4;
  map<string, string> metadata = 5;
}

// SubmitPlayResponse represents the response to a submit play request
message SubmitPlayResponse {
  bool success = 1;
  string play_id = 2;
  spage.core.Error error = 3;
}

// GetPlayStatusRequest represents a request to get play status
message GetPlayStatusRequest {
  string play_id = 1;
}

// GetPlayStatusResponse represents the response with play status
message GetPlayStatusResponse {
  spage.core.SpagePlay play = 1;
  spage.core.Error error = 2;
}

// CancelPlayRequest represents a request to cancel a play
message CancelPlayRequest {
  string play_id = 1;
  string reason = 2;
}

// CancelPlayResponse represents the response to a cancel play request
message CancelPlayResponse {
  bool success = 1;
  spage.core.Error error = 2;
}

// ListPlaysRequest represents a request to list plays
message ListPlaysRequest {
  int32 limit = 1;
  int32 offset = 2;
  string status = 3;
  string type = 4;
}

// ListPlaysResponse represents the response with a list of plays
message ListPlaysResponse {
  repeated spage.core.SpagePlay plays = 1;
  int32 total = 2;
  spage.core.Error error = 3;
}

// AuthRequest represents an authentication request
message AuthRequest {
  string api_key = 1;
  string client_id = 2;
  map<string, string> metadata = 3;
}

// AuthResponse represents the response to an authentication request
message AuthResponse {
  bool success = 1;
  string token = 2;
  int64 expires_at = 3;
  map<string, string> permissions = 4;
  spage.core.Error error = 5;
}

// ValidateTokenRequest represents a request to validate a token
message ValidateTokenRequest {
  string token = 1;
}

// ValidateTokenResponse represents the response to a token validation request
message ValidateTokenResponse {
  bool valid = 1;
  string client_id = 2;
  map<string, string> permissions = 3;
  int64 expires_at = 4;
  spage.core.Error error = 5;
} 