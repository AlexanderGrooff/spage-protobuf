syntax = "proto3";

package spage.api;

option go_package = "github.com/AlexanderGrooff/spage-protobuf/spage/api";

import "google/protobuf/empty.proto";
import "spage/core/plays.proto";
import "spage/core/common.proto";
import "spage/core/playbooks.proto";

// SpageAggregation service handles data aggregation from daemons to the API
service SpageAggregation {
  // Daemon registration
  rpc RegisterDaemon(RegisterDaemonRequest) returns (RegisterDaemonResponse);
  rpc UnregisterDaemon(UnregisterDaemonRequest) returns (UnregisterDaemonResponse);
  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);

  // Play management
  rpc SubmitPlay(SubmitPlayRequest) returns (SubmitPlayResponse);
  rpc UpdatePlay(UpdatePlayRequest) returns (UpdatePlayResponse);

  // Task management
  rpc SubmitTask(SubmitTaskRequest) returns (SubmitTaskResponse);
  rpc UpdateTask(UpdateTaskRequest) returns (UpdateTaskResponse);

  // Metrics management
  rpc SubmitPlayMetrics(SubmitPlayMetricsRequest) returns (SubmitPlayMetricsResponse);

  // Health check
  rpc HealthCheck(google.protobuf.Empty) returns (spage.core.HealthStatus);

  // Playbook management
  rpc GetPlaybooks(GetPlaybooksRequest) returns (GetPlaybooksResponse);
}

// RegisterDaemonRequest represents a request to register a daemon
message RegisterDaemonRequest {
  string daemon_id = 1;
  string endpoint = 2;
  string hostname = 3;
  string version = 4;
  map<string, string> capabilities = 5;
}

// RegisterDaemonResponse represents the response to a daemon registration request
message RegisterDaemonResponse {
  bool success = 1;
  string daemon_id = 2;
  spage.core.Error error = 3;
}

// UnregisterDaemonRequest represents a request to unregister a daemon
message UnregisterDaemonRequest {
  string daemon_id = 1;
  string reason = 2;
}

// UnregisterDaemonResponse represents the response to a daemon unregistration request
message UnregisterDaemonResponse {
  bool success = 1;
  spage.core.Error error = 2;
}

// HeartbeatRequest represents a heartbeat from a daemon
message HeartbeatRequest {
  string daemon_id = 1;
  string status = 2;
  map<string, string> metrics = 3;
}

// HeartbeatResponse represents the response to a heartbeat
message HeartbeatResponse {
  bool success = 1;
  spage.core.Error error = 2;
}

// SubmitPlayRequest represents a request to submit a new play
message SubmitPlayRequest {
  spage.core.SpagePlay play = 1;
}

// SubmitPlayResponse represents the response to a submit play request
message SubmitPlayResponse {
  bool success = 1;
  string play_id = 2;
  spage.core.Error error = 3;
}

// UpdatePlayRequest represents a request to update an existing play
message UpdatePlayRequest {
  spage.core.SpagePlay play = 1;
}

// UpdatePlayResponse represents the response to an update play request
message UpdatePlayResponse {
  bool success = 1;
  spage.core.Error error = 2;
}

// SubmitTaskRequest represents a request to submit a new task
message SubmitTaskRequest {
  string play_id = 1;
  spage.core.SpageTask task = 2;
}

// SubmitTaskResponse represents the response to a submit task request
message SubmitTaskResponse {
  bool success = 1;
  string task_id = 2;
  spage.core.Error error = 3;
}

// UpdateTaskRequest represents a request to update an existing task
message UpdateTaskRequest {
  string play_id = 1;
  spage.core.SpageTask task = 2;
}

// UpdateTaskResponse represents the response to an update task request
message UpdateTaskResponse {
  bool success = 1;
  spage.core.Error error = 2;
}

// SubmitPlayMetricsRequest represents a request to submit play metrics
message SubmitPlayMetricsRequest {
  string play_id = 1;
  spage.core.PlayMetrics metrics = 2;
}

// SubmitPlayMetricsResponse represents the response to a submit metrics request
message SubmitPlayMetricsResponse {
  bool success = 1;
  spage.core.Error error = 2;
}

// GetPlaybooksRequest represents a request to get all playbooks
message GetPlaybooksRequest {
  // Can be extended with pagination in the future
}

// GetPlaybooksResponse represents the response to a get playbooks request
message GetPlaybooksResponse {
  repeated spage.core.Playbook playbooks = 1;
}
