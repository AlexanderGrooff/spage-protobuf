// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: spage/core/play_execution.proto

package core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SpageExecution_ExecutePlay_FullMethodName            = "/spage.core.SpageExecution/ExecutePlay"
	SpageExecution_CancelPlay_FullMethodName             = "/spage.core.SpageExecution/CancelPlay"
	SpageExecution_GetPlayStatus_FullMethodName          = "/spage.core.SpageExecution/GetPlayStatus"
	SpageExecution_RegisterPlay_FullMethodName           = "/spage.core.SpageExecution/RegisterPlay"
	SpageExecution_RegisterPlayCompletion_FullMethodName = "/spage.core.SpageExecution/RegisterPlayCompletion"
	SpageExecution_StreamTaskProgress_FullMethodName     = "/spage.core.SpageExecution/StreamTaskProgress"
	SpageExecution_StreamPlayProgress_FullMethodName     = "/spage.core.SpageExecution/StreamPlayProgress"
	SpageExecution_HealthCheck_FullMethodName            = "/spage.core.SpageExecution/HealthCheck"
)

// SpageExecutionClient is the client API for SpageExecution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SpageExecution service handles communication between Spage and the Daemon
type SpageExecutionClient interface {
	// Task execution
	ExecutePlay(ctx context.Context, in *ExecutePlayRequest, opts ...grpc.CallOption) (*ExecutePlayResponse, error)
	CancelPlay(ctx context.Context, in *CancelPlayRequest, opts ...grpc.CallOption) (*CancelPlayResponse, error)
	GetPlayStatus(ctx context.Context, in *GetPlayStatusRequest, opts ...grpc.CallOption) (*GetPlayStatusResponse, error)
	// Task registration and status updates
	RegisterPlay(ctx context.Context, in *RegisterPlayRequest, opts ...grpc.CallOption) (*RegisterPlayResponse, error)
	RegisterPlayCompletion(ctx context.Context, in *RegisterPlayCompletionRequest, opts ...grpc.CallOption) (*RegisterPlayCompletionResponse, error)
	// Real-time progress streaming
	StreamTaskProgress(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TaskProgressUpdate, TaskProgressUpdate], error)
	StreamPlayProgress(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PlayProgressUpdate, PlayProgressUpdate], error)
	// Health and metrics
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthStatus, error)
}

type spageExecutionClient struct {
	cc grpc.ClientConnInterface
}

func NewSpageExecutionClient(cc grpc.ClientConnInterface) SpageExecutionClient {
	return &spageExecutionClient{cc}
}

func (c *spageExecutionClient) ExecutePlay(ctx context.Context, in *ExecutePlayRequest, opts ...grpc.CallOption) (*ExecutePlayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecutePlayResponse)
	err := c.cc.Invoke(ctx, SpageExecution_ExecutePlay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spageExecutionClient) CancelPlay(ctx context.Context, in *CancelPlayRequest, opts ...grpc.CallOption) (*CancelPlayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelPlayResponse)
	err := c.cc.Invoke(ctx, SpageExecution_CancelPlay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spageExecutionClient) GetPlayStatus(ctx context.Context, in *GetPlayStatusRequest, opts ...grpc.CallOption) (*GetPlayStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlayStatusResponse)
	err := c.cc.Invoke(ctx, SpageExecution_GetPlayStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spageExecutionClient) RegisterPlay(ctx context.Context, in *RegisterPlayRequest, opts ...grpc.CallOption) (*RegisterPlayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterPlayResponse)
	err := c.cc.Invoke(ctx, SpageExecution_RegisterPlay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spageExecutionClient) RegisterPlayCompletion(ctx context.Context, in *RegisterPlayCompletionRequest, opts ...grpc.CallOption) (*RegisterPlayCompletionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterPlayCompletionResponse)
	err := c.cc.Invoke(ctx, SpageExecution_RegisterPlayCompletion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spageExecutionClient) StreamTaskProgress(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TaskProgressUpdate, TaskProgressUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SpageExecution_ServiceDesc.Streams[0], SpageExecution_StreamTaskProgress_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TaskProgressUpdate, TaskProgressUpdate]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SpageExecution_StreamTaskProgressClient = grpc.BidiStreamingClient[TaskProgressUpdate, TaskProgressUpdate]

func (c *spageExecutionClient) StreamPlayProgress(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[PlayProgressUpdate, PlayProgressUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SpageExecution_ServiceDesc.Streams[1], SpageExecution_StreamPlayProgress_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PlayProgressUpdate, PlayProgressUpdate]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SpageExecution_StreamPlayProgressClient = grpc.BidiStreamingClient[PlayProgressUpdate, PlayProgressUpdate]

func (c *spageExecutionClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthStatus)
	err := c.cc.Invoke(ctx, SpageExecution_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpageExecutionServer is the server API for SpageExecution service.
// All implementations must embed UnimplementedSpageExecutionServer
// for forward compatibility.
//
// SpageExecution service handles communication between Spage and the Daemon
type SpageExecutionServer interface {
	// Task execution
	ExecutePlay(context.Context, *ExecutePlayRequest) (*ExecutePlayResponse, error)
	CancelPlay(context.Context, *CancelPlayRequest) (*CancelPlayResponse, error)
	GetPlayStatus(context.Context, *GetPlayStatusRequest) (*GetPlayStatusResponse, error)
	// Task registration and status updates
	RegisterPlay(context.Context, *RegisterPlayRequest) (*RegisterPlayResponse, error)
	RegisterPlayCompletion(context.Context, *RegisterPlayCompletionRequest) (*RegisterPlayCompletionResponse, error)
	// Real-time progress streaming
	StreamTaskProgress(grpc.BidiStreamingServer[TaskProgressUpdate, TaskProgressUpdate]) error
	StreamPlayProgress(grpc.BidiStreamingServer[PlayProgressUpdate, PlayProgressUpdate]) error
	// Health and metrics
	HealthCheck(context.Context, *emptypb.Empty) (*HealthStatus, error)
	mustEmbedUnimplementedSpageExecutionServer()
}

// UnimplementedSpageExecutionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpageExecutionServer struct{}

func (UnimplementedSpageExecutionServer) ExecutePlay(context.Context, *ExecutePlayRequest) (*ExecutePlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePlay not implemented")
}
func (UnimplementedSpageExecutionServer) CancelPlay(context.Context, *CancelPlayRequest) (*CancelPlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPlay not implemented")
}
func (UnimplementedSpageExecutionServer) GetPlayStatus(context.Context, *GetPlayStatusRequest) (*GetPlayStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayStatus not implemented")
}
func (UnimplementedSpageExecutionServer) RegisterPlay(context.Context, *RegisterPlayRequest) (*RegisterPlayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlay not implemented")
}
func (UnimplementedSpageExecutionServer) RegisterPlayCompletion(context.Context, *RegisterPlayCompletionRequest) (*RegisterPlayCompletionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPlayCompletion not implemented")
}
func (UnimplementedSpageExecutionServer) StreamTaskProgress(grpc.BidiStreamingServer[TaskProgressUpdate, TaskProgressUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTaskProgress not implemented")
}
func (UnimplementedSpageExecutionServer) StreamPlayProgress(grpc.BidiStreamingServer[PlayProgressUpdate, PlayProgressUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method StreamPlayProgress not implemented")
}
func (UnimplementedSpageExecutionServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedSpageExecutionServer) mustEmbedUnimplementedSpageExecutionServer() {}
func (UnimplementedSpageExecutionServer) testEmbeddedByValue()                        {}

// UnsafeSpageExecutionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpageExecutionServer will
// result in compilation errors.
type UnsafeSpageExecutionServer interface {
	mustEmbedUnimplementedSpageExecutionServer()
}

func RegisterSpageExecutionServer(s grpc.ServiceRegistrar, srv SpageExecutionServer) {
	// If the following call pancis, it indicates UnimplementedSpageExecutionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SpageExecution_ServiceDesc, srv)
}

func _SpageExecution_ExecutePlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpageExecutionServer).ExecutePlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpageExecution_ExecutePlay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpageExecutionServer).ExecutePlay(ctx, req.(*ExecutePlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpageExecution_CancelPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelPlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpageExecutionServer).CancelPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpageExecution_CancelPlay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpageExecutionServer).CancelPlay(ctx, req.(*CancelPlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpageExecution_GetPlayStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpageExecutionServer).GetPlayStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpageExecution_GetPlayStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpageExecutionServer).GetPlayStatus(ctx, req.(*GetPlayStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpageExecution_RegisterPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPlayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpageExecutionServer).RegisterPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpageExecution_RegisterPlay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpageExecutionServer).RegisterPlay(ctx, req.(*RegisterPlayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpageExecution_RegisterPlayCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPlayCompletionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpageExecutionServer).RegisterPlayCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpageExecution_RegisterPlayCompletion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpageExecutionServer).RegisterPlayCompletion(ctx, req.(*RegisterPlayCompletionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpageExecution_StreamTaskProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpageExecutionServer).StreamTaskProgress(&grpc.GenericServerStream[TaskProgressUpdate, TaskProgressUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SpageExecution_StreamTaskProgressServer = grpc.BidiStreamingServer[TaskProgressUpdate, TaskProgressUpdate]

func _SpageExecution_StreamPlayProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpageExecutionServer).StreamPlayProgress(&grpc.GenericServerStream[PlayProgressUpdate, PlayProgressUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SpageExecution_StreamPlayProgressServer = grpc.BidiStreamingServer[PlayProgressUpdate, PlayProgressUpdate]

func _SpageExecution_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpageExecutionServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpageExecution_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpageExecutionServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// SpageExecution_ServiceDesc is the grpc.ServiceDesc for SpageExecution service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpageExecution_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spage.core.SpageExecution",
	HandlerType: (*SpageExecutionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecutePlay",
			Handler:    _SpageExecution_ExecutePlay_Handler,
		},
		{
			MethodName: "CancelPlay",
			Handler:    _SpageExecution_CancelPlay_Handler,
		},
		{
			MethodName: "GetPlayStatus",
			Handler:    _SpageExecution_GetPlayStatus_Handler,
		},
		{
			MethodName: "RegisterPlay",
			Handler:    _SpageExecution_RegisterPlay_Handler,
		},
		{
			MethodName: "RegisterPlayCompletion",
			Handler:    _SpageExecution_RegisterPlayCompletion_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _SpageExecution_HealthCheck_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTaskProgress",
			Handler:       _SpageExecution_StreamTaskProgress_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamPlayProgress",
			Handler:       _SpageExecution_StreamPlayProgress_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "spage/core/play_execution.proto",
}
