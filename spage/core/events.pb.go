// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: spage/core/events.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Telemetry events that reference messages from plays.proto
type PlayEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Play          *SpagePlay             `protobuf:"bytes,1,opt,name=play,proto3" json:"play,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayEvent) Reset() {
	*x = PlayEvent{}
	mi := &file_spage_core_events_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayEvent) ProtoMessage() {}

func (x *PlayEvent) ProtoReflect() protoreflect.Message {
	mi := &file_spage_core_events_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayEvent.ProtoReflect.Descriptor instead.
func (*PlayEvent) Descriptor() ([]byte, []int) {
	return file_spage_core_events_proto_rawDescGZIP(), []int{0}
}

func (x *PlayEvent) GetPlay() *SpagePlay {
	if x != nil {
		return x.Play
	}
	return nil
}

type DaemonStatusEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DaemonId      string                 `protobuf:"bytes,1,opt,name=daemon_id,json=daemonId,proto3" json:"daemon_id,omitempty"`
	Health        *HealthStatus          `protobuf:"bytes,2,opt,name=health,proto3" json:"health,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DaemonStatusEvent) Reset() {
	*x = DaemonStatusEvent{}
	mi := &file_spage_core_events_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DaemonStatusEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonStatusEvent) ProtoMessage() {}

func (x *DaemonStatusEvent) ProtoReflect() protoreflect.Message {
	mi := &file_spage_core_events_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonStatusEvent.ProtoReflect.Descriptor instead.
func (*DaemonStatusEvent) Descriptor() ([]byte, []int) {
	return file_spage_core_events_proto_rawDescGZIP(), []int{1}
}

func (x *DaemonStatusEvent) GetDaemonId() string {
	if x != nil {
		return x.DaemonId
	}
	return ""
}

func (x *DaemonStatusEvent) GetHealth() *HealthStatus {
	if x != nil {
		return x.Health
	}
	return nil
}

// Log chunk reference via object store
type LogChunkEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayId        string                 `protobuf:"bytes,1,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	TaskId        int32                  `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ObjectKey     string                 `protobuf:"bytes,3,opt,name=object_key,json=objectKey,proto3" json:"object_key,omitempty"`
	ContentType   string                 `protobuf:"bytes,4,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"` // e.g. text/plain
	Size          uint64                 `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Stream        string                 `protobuf:"bytes,6,opt,name=stream,proto3" json:"stream,omitempty"` // stdout or stderr
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LogChunkEvent) Reset() {
	*x = LogChunkEvent{}
	mi := &file_spage_core_events_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogChunkEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogChunkEvent) ProtoMessage() {}

func (x *LogChunkEvent) ProtoReflect() protoreflect.Message {
	mi := &file_spage_core_events_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogChunkEvent.ProtoReflect.Descriptor instead.
func (*LogChunkEvent) Descriptor() ([]byte, []int) {
	return file_spage_core_events_proto_rawDescGZIP(), []int{2}
}

func (x *LogChunkEvent) GetPlayId() string {
	if x != nil {
		return x.PlayId
	}
	return ""
}

func (x *LogChunkEvent) GetTaskId() int32 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *LogChunkEvent) GetObjectKey() string {
	if x != nil {
		return x.ObjectKey
	}
	return ""
}

func (x *LogChunkEvent) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *LogChunkEvent) GetSize() uint64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *LogChunkEvent) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *LogChunkEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_spage_core_events_proto protoreflect.FileDescriptor

const file_spage_core_events_proto_rawDesc = "" +
	"\n" +
	"\x17spage/core/events.proto\x12\n" +
	"spage.core\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x16spage/core/plays.proto\x1a\x17spage/core/common.proto\"6\n" +
	"\tPlayEvent\x12)\n" +
	"\x04play\x18\x01 \x01(\v2\x15.spage.core.SpagePlayR\x04play\"b\n" +
	"\x11DaemonStatusEvent\x12\x1b\n" +
	"\tdaemon_id\x18\x01 \x01(\tR\bdaemonId\x120\n" +
	"\x06health\x18\x02 \x01(\v2\x18.spage.core.HealthStatusR\x06health\"\xe9\x01\n" +
	"\rLogChunkEvent\x12\x17\n" +
	"\aplay_id\x18\x01 \x01(\tR\x06playId\x12\x17\n" +
	"\atask_id\x18\x02 \x01(\x05R\x06taskId\x12\x1d\n" +
	"\n" +
	"object_key\x18\x03 \x01(\tR\tobjectKey\x12!\n" +
	"\fcontent_type\x18\x04 \x01(\tR\vcontentType\x12\x12\n" +
	"\x04size\x18\x05 \x01(\x04R\x04size\x12\x16\n" +
	"\x06stream\x18\x06 \x01(\tR\x06stream\x128\n" +
	"\ttimestamp\x18\a \x01(\v2\x1a.google.protobuf.TimestampR\ttimestampB6Z4github.com/AlexanderGrooff/spage-protobuf/spage/coreb\x06proto3"

var (
	file_spage_core_events_proto_rawDescOnce sync.Once
	file_spage_core_events_proto_rawDescData []byte
)

func file_spage_core_events_proto_rawDescGZIP() []byte {
	file_spage_core_events_proto_rawDescOnce.Do(func() {
		file_spage_core_events_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spage_core_events_proto_rawDesc), len(file_spage_core_events_proto_rawDesc)))
	})
	return file_spage_core_events_proto_rawDescData
}

var file_spage_core_events_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_spage_core_events_proto_goTypes = []any{
	(*PlayEvent)(nil),             // 0: spage.core.PlayEvent
	(*DaemonStatusEvent)(nil),     // 1: spage.core.DaemonStatusEvent
	(*LogChunkEvent)(nil),         // 2: spage.core.LogChunkEvent
	(*SpagePlay)(nil),             // 3: spage.core.SpagePlay
	(*HealthStatus)(nil),          // 4: spage.core.HealthStatus
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_spage_core_events_proto_depIdxs = []int32{
	3, // 0: spage.core.PlayEvent.play:type_name -> spage.core.SpagePlay
	4, // 1: spage.core.DaemonStatusEvent.health:type_name -> spage.core.HealthStatus
	5, // 2: spage.core.LogChunkEvent.timestamp:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_spage_core_events_proto_init() }
func file_spage_core_events_proto_init() {
	if File_spage_core_events_proto != nil {
		return
	}
	file_spage_core_plays_proto_init()
	file_spage_core_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spage_core_events_proto_rawDesc), len(file_spage_core_events_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spage_core_events_proto_goTypes,
		DependencyIndexes: file_spage_core_events_proto_depIdxs,
		MessageInfos:      file_spage_core_events_proto_msgTypes,
	}.Build()
	File_spage_core_events_proto = out.File
	file_spage_core_events_proto_goTypes = nil
	file_spage_core_events_proto_depIdxs = nil
}
