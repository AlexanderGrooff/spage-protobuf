syntax = "proto3";

package spage.core;

option go_package = "github.com/AlexanderGrooff/spage-protobuf/spage/core";

import "google/protobuf/empty.proto";
import "spage/core/plays.proto";
import "spage/core/common.proto";

// SpageExecution service handles communication between Spage and the Daemon
service SpageExecution {
  // Task execution
  rpc ExecutePlay(ExecutePlayRequest) returns (ExecutePlayResponse);
  rpc CancelPlay(CancelPlayRequest) returns (CancelPlayResponse);
  rpc GetPlayStatus(GetPlayStatusRequest) returns (GetPlayStatusResponse);
  rpc GetPlayMetrics(GetPlayMetricsRequest) returns (GetPlayMetricsResponse);

  // Task registration and status updates
  rpc RegisterPlay(RegisterPlayRequest) returns (RegisterPlayResponse);
  rpc RegisterPlayCompletion(RegisterPlayCompletionRequest) returns (RegisterPlayCompletionResponse);

  // Real-time progress streaming
  rpc StreamTaskProgress(stream TaskProgressUpdate) returns (stream TaskProgressUpdate);

  // Health and metrics
  rpc HealthCheck(google.protobuf.Empty) returns (HealthStatus);
}

// ExecutePlayRequest represents a request to execute a play
message ExecutePlayRequest {
  string play_id = 1;
  string playbook = 2; // If set to spage://bundle/<id>#<root> daemon/CLI will fetch bundle
  string inventory = 3;
  map<string, string> variables = 4;
  string executor = 5; // "local", "temporal", etc.
  map<string, string> metadata = 6;

  // Optional explicit bundle parameters (preferred long-term over playbook URI)
  string bundle_id = 7;
  string bundle_root_path = 8;
}

// ExecutePlayResponse represents the response to an execute play request
message ExecutePlayResponse {
  bool success = 1;
  string play_id = 2;
  Error error = 3;
}

// CancelPlayRequest is defined in common.proto for reuse

// CancelPlayResponse represents the response to a cancel play request
message CancelPlayResponse {
  bool success = 1;
  Error error = 2;
}

// GetPlayStatusRequest represents a request to get play status
message GetPlayStatusRequest {
  string play_id = 1;
}

// GetPlayStatusResponse represents the response with play status
message GetPlayStatusResponse {
  SpagePlay play = 1;
  Error error = 2;
}

// GetPlayMetricsRequest represents a request to get play metrics
message GetPlayMetricsRequest {
  string play_id = 1;
}

// GetPlayMetricsResponse represents the response with play metrics
message GetPlayMetricsResponse {
  PlayMetrics metrics = 1;
  Error error = 2;
}

// RegisterPlayRequest represents a request to register/update a play
message RegisterPlayRequest {
  string play_id = 1;
  string playbook = 2;
  string inventory = 3;
  map<string, string> variables = 4;
  string executor = 5;
  map<string, string> metadata = 6;
  // Optional explicit bundle parameters
  string bundle_id = 7;
  string bundle_root_path = 8;
}

// RegisterPlayResponse represents the response to a register play request
message RegisterPlayResponse {
  bool success = 1;
  string play_id = 2;
  Error error = 3;
}

// RegisterPlayCompletionRequest represents a request to register the final status of a play
message RegisterPlayCompletionRequest {
  string play_id = 1;
  // Optional final status of the play. If unspecified, defaults to COMPLETED
  PlayStatus status = 2;
  // Optional error message when status is FAILED or CANCELED
  string error = 3;
}

message RegisterPlayCompletionResponse {
  bool success = 1;
  Error error = 2;
}
