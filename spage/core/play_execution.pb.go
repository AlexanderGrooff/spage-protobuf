// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: spage/core/play_execution.proto

package core

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ExecutePlayRequest represents a request to execute a play
type ExecutePlayRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	PlayId    string                 `protobuf:"bytes,1,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	Playbook  string                 `protobuf:"bytes,2,opt,name=playbook,proto3" json:"playbook,omitempty"` // If set to spage://bundle/<id>#<root> daemon/CLI will fetch bundle
	Inventory string                 `protobuf:"bytes,3,opt,name=inventory,proto3" json:"inventory,omitempty"`
	Variables map[string]string      `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Executor  string                 `protobuf:"bytes,5,opt,name=executor,proto3" json:"executor,omitempty"` // "local", "temporal", etc.
	Metadata  map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Optional explicit bundle parameters (preferred long-term over playbook URI)
	BundleId       string `protobuf:"bytes,7,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
	BundleRootPath string `protobuf:"bytes,8,opt,name=bundle_root_path,json=bundleRootPath,proto3" json:"bundle_root_path,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ExecutePlayRequest) Reset() {
	*x = ExecutePlayRequest{}
	mi := &file_spage_core_play_execution_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutePlayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePlayRequest) ProtoMessage() {}

func (x *ExecutePlayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spage_core_play_execution_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePlayRequest.ProtoReflect.Descriptor instead.
func (*ExecutePlayRequest) Descriptor() ([]byte, []int) {
	return file_spage_core_play_execution_proto_rawDescGZIP(), []int{0}
}

func (x *ExecutePlayRequest) GetPlayId() string {
	if x != nil {
		return x.PlayId
	}
	return ""
}

func (x *ExecutePlayRequest) GetPlaybook() string {
	if x != nil {
		return x.Playbook
	}
	return ""
}

func (x *ExecutePlayRequest) GetInventory() string {
	if x != nil {
		return x.Inventory
	}
	return ""
}

func (x *ExecutePlayRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ExecutePlayRequest) GetExecutor() string {
	if x != nil {
		return x.Executor
	}
	return ""
}

func (x *ExecutePlayRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ExecutePlayRequest) GetBundleId() string {
	if x != nil {
		return x.BundleId
	}
	return ""
}

func (x *ExecutePlayRequest) GetBundleRootPath() string {
	if x != nil {
		return x.BundleRootPath
	}
	return ""
}

// ExecutePlayResponse represents the response to an execute play request
type ExecutePlayResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	PlayId        string                 `protobuf:"bytes,2,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	Error         *Error                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExecutePlayResponse) Reset() {
	*x = ExecutePlayResponse{}
	mi := &file_spage_core_play_execution_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExecutePlayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePlayResponse) ProtoMessage() {}

func (x *ExecutePlayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spage_core_play_execution_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePlayResponse.ProtoReflect.Descriptor instead.
func (*ExecutePlayResponse) Descriptor() ([]byte, []int) {
	return file_spage_core_play_execution_proto_rawDescGZIP(), []int{1}
}

func (x *ExecutePlayResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ExecutePlayResponse) GetPlayId() string {
	if x != nil {
		return x.PlayId
	}
	return ""
}

func (x *ExecutePlayResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// CancelPlayResponse represents the response to a cancel play request
type CancelPlayResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CancelPlayResponse) Reset() {
	*x = CancelPlayResponse{}
	mi := &file_spage_core_play_execution_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelPlayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelPlayResponse) ProtoMessage() {}

func (x *CancelPlayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spage_core_play_execution_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelPlayResponse.ProtoReflect.Descriptor instead.
func (*CancelPlayResponse) Descriptor() ([]byte, []int) {
	return file_spage_core_play_execution_proto_rawDescGZIP(), []int{2}
}

func (x *CancelPlayResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CancelPlayResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// GetPlayStatusRequest represents a request to get play status
type GetPlayStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayId        string                 `protobuf:"bytes,1,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlayStatusRequest) Reset() {
	*x = GetPlayStatusRequest{}
	mi := &file_spage_core_play_execution_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlayStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayStatusRequest) ProtoMessage() {}

func (x *GetPlayStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spage_core_play_execution_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayStatusRequest.ProtoReflect.Descriptor instead.
func (*GetPlayStatusRequest) Descriptor() ([]byte, []int) {
	return file_spage_core_play_execution_proto_rawDescGZIP(), []int{3}
}

func (x *GetPlayStatusRequest) GetPlayId() string {
	if x != nil {
		return x.PlayId
	}
	return ""
}

// GetPlayStatusResponse represents the response with play status
type GetPlayStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Play          *SpagePlay             `protobuf:"bytes,1,opt,name=play,proto3" json:"play,omitempty"`
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlayStatusResponse) Reset() {
	*x = GetPlayStatusResponse{}
	mi := &file_spage_core_play_execution_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlayStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayStatusResponse) ProtoMessage() {}

func (x *GetPlayStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spage_core_play_execution_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayStatusResponse.ProtoReflect.Descriptor instead.
func (*GetPlayStatusResponse) Descriptor() ([]byte, []int) {
	return file_spage_core_play_execution_proto_rawDescGZIP(), []int{4}
}

func (x *GetPlayStatusResponse) GetPlay() *SpagePlay {
	if x != nil {
		return x.Play
	}
	return nil
}

func (x *GetPlayStatusResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// RegisterPlayRequest represents a request to register/update a play
type RegisterPlayRequest struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	PlayId    string                 `protobuf:"bytes,1,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	Playbook  string                 `protobuf:"bytes,2,opt,name=playbook,proto3" json:"playbook,omitempty"`
	Inventory string                 `protobuf:"bytes,3,opt,name=inventory,proto3" json:"inventory,omitempty"`
	Variables map[string]string      `protobuf:"bytes,4,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Executor  string                 `protobuf:"bytes,5,opt,name=executor,proto3" json:"executor,omitempty"`
	Metadata  map[string]string      `protobuf:"bytes,6,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Optional explicit bundle parameters
	BundleId       string `protobuf:"bytes,7,opt,name=bundle_id,json=bundleId,proto3" json:"bundle_id,omitempty"`
	BundleRootPath string `protobuf:"bytes,8,opt,name=bundle_root_path,json=bundleRootPath,proto3" json:"bundle_root_path,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RegisterPlayRequest) Reset() {
	*x = RegisterPlayRequest{}
	mi := &file_spage_core_play_execution_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterPlayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPlayRequest) ProtoMessage() {}

func (x *RegisterPlayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spage_core_play_execution_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPlayRequest.ProtoReflect.Descriptor instead.
func (*RegisterPlayRequest) Descriptor() ([]byte, []int) {
	return file_spage_core_play_execution_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterPlayRequest) GetPlayId() string {
	if x != nil {
		return x.PlayId
	}
	return ""
}

func (x *RegisterPlayRequest) GetPlaybook() string {
	if x != nil {
		return x.Playbook
	}
	return ""
}

func (x *RegisterPlayRequest) GetInventory() string {
	if x != nil {
		return x.Inventory
	}
	return ""
}

func (x *RegisterPlayRequest) GetVariables() map[string]string {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *RegisterPlayRequest) GetExecutor() string {
	if x != nil {
		return x.Executor
	}
	return ""
}

func (x *RegisterPlayRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RegisterPlayRequest) GetBundleId() string {
	if x != nil {
		return x.BundleId
	}
	return ""
}

func (x *RegisterPlayRequest) GetBundleRootPath() string {
	if x != nil {
		return x.BundleRootPath
	}
	return ""
}

// RegisterPlayResponse represents the response to a register play request
type RegisterPlayResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	PlayId        string                 `protobuf:"bytes,2,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	Error         *Error                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterPlayResponse) Reset() {
	*x = RegisterPlayResponse{}
	mi := &file_spage_core_play_execution_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterPlayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPlayResponse) ProtoMessage() {}

func (x *RegisterPlayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spage_core_play_execution_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPlayResponse.ProtoReflect.Descriptor instead.
func (*RegisterPlayResponse) Descriptor() ([]byte, []int) {
	return file_spage_core_play_execution_proto_rawDescGZIP(), []int{6}
}

func (x *RegisterPlayResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterPlayResponse) GetPlayId() string {
	if x != nil {
		return x.PlayId
	}
	return ""
}

func (x *RegisterPlayResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// RegisterPlayCompletionRequest represents a request to register the final status of a play
type RegisterPlayCompletionRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	PlayId string                 `protobuf:"bytes,1,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	// Optional final status of the play. If unspecified, defaults to COMPLETED
	Status PlayStatus `protobuf:"varint,2,opt,name=status,proto3,enum=spage.core.PlayStatus" json:"status,omitempty"`
	// Optional error message when status is FAILED or CANCELED
	Error         string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterPlayCompletionRequest) Reset() {
	*x = RegisterPlayCompletionRequest{}
	mi := &file_spage_core_play_execution_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterPlayCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPlayCompletionRequest) ProtoMessage() {}

func (x *RegisterPlayCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_spage_core_play_execution_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPlayCompletionRequest.ProtoReflect.Descriptor instead.
func (*RegisterPlayCompletionRequest) Descriptor() ([]byte, []int) {
	return file_spage_core_play_execution_proto_rawDescGZIP(), []int{7}
}

func (x *RegisterPlayCompletionRequest) GetPlayId() string {
	if x != nil {
		return x.PlayId
	}
	return ""
}

func (x *RegisterPlayCompletionRequest) GetStatus() PlayStatus {
	if x != nil {
		return x.Status
	}
	return PlayStatus_PLAY_STATUS_UNSPECIFIED
}

func (x *RegisterPlayCompletionRequest) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RegisterPlayCompletionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         *Error                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterPlayCompletionResponse) Reset() {
	*x = RegisterPlayCompletionResponse{}
	mi := &file_spage_core_play_execution_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterPlayCompletionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterPlayCompletionResponse) ProtoMessage() {}

func (x *RegisterPlayCompletionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_spage_core_play_execution_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterPlayCompletionResponse.ProtoReflect.Descriptor instead.
func (*RegisterPlayCompletionResponse) Descriptor() ([]byte, []int) {
	return file_spage_core_play_execution_proto_rawDescGZIP(), []int{8}
}

func (x *RegisterPlayCompletionResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RegisterPlayCompletionResponse) GetError() *Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// PlayProgressUpdate represents a play-level progress update
type PlayProgressUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PlayId        string                 `protobuf:"bytes,1,opt,name=play_id,json=playId,proto3" json:"play_id,omitempty"`
	Status        PlayStatus             `protobuf:"varint,2,opt,name=status,proto3,enum=spage.core.PlayStatus" json:"status,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	Output        string                 `protobuf:"bytes,4,opt,name=output,proto3" json:"output,omitempty"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlayProgressUpdate) Reset() {
	*x = PlayProgressUpdate{}
	mi := &file_spage_core_play_execution_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayProgressUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayProgressUpdate) ProtoMessage() {}

func (x *PlayProgressUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_spage_core_play_execution_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayProgressUpdate.ProtoReflect.Descriptor instead.
func (*PlayProgressUpdate) Descriptor() ([]byte, []int) {
	return file_spage_core_play_execution_proto_rawDescGZIP(), []int{9}
}

func (x *PlayProgressUpdate) GetPlayId() string {
	if x != nil {
		return x.PlayId
	}
	return ""
}

func (x *PlayProgressUpdate) GetStatus() PlayStatus {
	if x != nil {
		return x.Status
	}
	return PlayStatus_PLAY_STATUS_UNSPECIFIED
}

func (x *PlayProgressUpdate) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *PlayProgressUpdate) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *PlayProgressUpdate) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_spage_core_play_execution_proto protoreflect.FileDescriptor

const file_spage_core_play_execution_proto_rawDesc = "" +
	"\n" +
	"\x1fspage/core/play_execution.proto\x12\n" +
	"spage.core\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x16spage/core/plays.proto\x1a\x17spage/core/common.proto\"\xdc\x03\n" +
	"\x12ExecutePlayRequest\x12\x17\n" +
	"\aplay_id\x18\x01 \x01(\tR\x06playId\x12\x1a\n" +
	"\bplaybook\x18\x02 \x01(\tR\bplaybook\x12\x1c\n" +
	"\tinventory\x18\x03 \x01(\tR\tinventory\x12K\n" +
	"\tvariables\x18\x04 \x03(\v2-.spage.core.ExecutePlayRequest.VariablesEntryR\tvariables\x12\x1a\n" +
	"\bexecutor\x18\x05 \x01(\tR\bexecutor\x12H\n" +
	"\bmetadata\x18\x06 \x03(\v2,.spage.core.ExecutePlayRequest.MetadataEntryR\bmetadata\x12\x1b\n" +
	"\tbundle_id\x18\a \x01(\tR\bbundleId\x12(\n" +
	"\x10bundle_root_path\x18\b \x01(\tR\x0ebundleRootPath\x1a<\n" +
	"\x0eVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"q\n" +
	"\x13ExecutePlayResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x17\n" +
	"\aplay_id\x18\x02 \x01(\tR\x06playId\x12'\n" +
	"\x05error\x18\x03 \x01(\v2\x11.spage.core.ErrorR\x05error\"W\n" +
	"\x12CancelPlayResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12'\n" +
	"\x05error\x18\x02 \x01(\v2\x11.spage.core.ErrorR\x05error\"/\n" +
	"\x14GetPlayStatusRequest\x12\x17\n" +
	"\aplay_id\x18\x01 \x01(\tR\x06playId\"k\n" +
	"\x15GetPlayStatusResponse\x12)\n" +
	"\x04play\x18\x01 \x01(\v2\x15.spage.core.SpagePlayR\x04play\x12'\n" +
	"\x05error\x18\x02 \x01(\v2\x11.spage.core.ErrorR\x05error\"\xdf\x03\n" +
	"\x13RegisterPlayRequest\x12\x17\n" +
	"\aplay_id\x18\x01 \x01(\tR\x06playId\x12\x1a\n" +
	"\bplaybook\x18\x02 \x01(\tR\bplaybook\x12\x1c\n" +
	"\tinventory\x18\x03 \x01(\tR\tinventory\x12L\n" +
	"\tvariables\x18\x04 \x03(\v2..spage.core.RegisterPlayRequest.VariablesEntryR\tvariables\x12\x1a\n" +
	"\bexecutor\x18\x05 \x01(\tR\bexecutor\x12I\n" +
	"\bmetadata\x18\x06 \x03(\v2-.spage.core.RegisterPlayRequest.MetadataEntryR\bmetadata\x12\x1b\n" +
	"\tbundle_id\x18\a \x01(\tR\bbundleId\x12(\n" +
	"\x10bundle_root_path\x18\b \x01(\tR\x0ebundleRootPath\x1a<\n" +
	"\x0eVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"r\n" +
	"\x14RegisterPlayResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x17\n" +
	"\aplay_id\x18\x02 \x01(\tR\x06playId\x12'\n" +
	"\x05error\x18\x03 \x01(\v2\x11.spage.core.ErrorR\x05error\"~\n" +
	"\x1dRegisterPlayCompletionRequest\x12\x17\n" +
	"\aplay_id\x18\x01 \x01(\tR\x06playId\x12.\n" +
	"\x06status\x18\x02 \x01(\x0e2\x16.spage.core.PlayStatusR\x06status\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"c\n" +
	"\x1eRegisterPlayCompletionResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12'\n" +
	"\x05error\x18\x02 \x01(\v2\x11.spage.core.ErrorR\x05error\"\xc5\x01\n" +
	"\x12PlayProgressUpdate\x12\x17\n" +
	"\aplay_id\x18\x01 \x01(\tR\x06playId\x12.\n" +
	"\x06status\x18\x02 \x01(\x0e2\x16.spage.core.PlayStatusR\x06status\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\x12\x16\n" +
	"\x06output\x18\x04 \x01(\tR\x06output\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp2\xbc\x05\n" +
	"\x0eSpageExecution\x12N\n" +
	"\vExecutePlay\x12\x1e.spage.core.ExecutePlayRequest\x1a\x1f.spage.core.ExecutePlayResponse\x12K\n" +
	"\n" +
	"CancelPlay\x12\x1d.spage.core.CancelPlayRequest\x1a\x1e.spage.core.CancelPlayResponse\x12T\n" +
	"\rGetPlayStatus\x12 .spage.core.GetPlayStatusRequest\x1a!.spage.core.GetPlayStatusResponse\x12Q\n" +
	"\fRegisterPlay\x12\x1f.spage.core.RegisterPlayRequest\x1a .spage.core.RegisterPlayResponse\x12o\n" +
	"\x16RegisterPlayCompletion\x12).spage.core.RegisterPlayCompletionRequest\x1a*.spage.core.RegisterPlayCompletionResponse\x12X\n" +
	"\x12StreamTaskProgress\x12\x1e.spage.core.TaskProgressUpdate\x1a\x1e.spage.core.TaskProgressUpdate(\x010\x01\x12X\n" +
	"\x12StreamPlayProgress\x12\x1e.spage.core.PlayProgressUpdate\x1a\x1e.spage.core.PlayProgressUpdate(\x010\x01\x12?\n" +
	"\vHealthCheck\x12\x16.google.protobuf.Empty\x1a\x18.spage.core.HealthStatusB6Z4github.com/AlexanderGrooff/spage-protobuf/spage/coreb\x06proto3"

var (
	file_spage_core_play_execution_proto_rawDescOnce sync.Once
	file_spage_core_play_execution_proto_rawDescData []byte
)

func file_spage_core_play_execution_proto_rawDescGZIP() []byte {
	file_spage_core_play_execution_proto_rawDescOnce.Do(func() {
		file_spage_core_play_execution_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spage_core_play_execution_proto_rawDesc), len(file_spage_core_play_execution_proto_rawDesc)))
	})
	return file_spage_core_play_execution_proto_rawDescData
}

var file_spage_core_play_execution_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_spage_core_play_execution_proto_goTypes = []any{
	(*ExecutePlayRequest)(nil),             // 0: spage.core.ExecutePlayRequest
	(*ExecutePlayResponse)(nil),            // 1: spage.core.ExecutePlayResponse
	(*CancelPlayResponse)(nil),             // 2: spage.core.CancelPlayResponse
	(*GetPlayStatusRequest)(nil),           // 3: spage.core.GetPlayStatusRequest
	(*GetPlayStatusResponse)(nil),          // 4: spage.core.GetPlayStatusResponse
	(*RegisterPlayRequest)(nil),            // 5: spage.core.RegisterPlayRequest
	(*RegisterPlayResponse)(nil),           // 6: spage.core.RegisterPlayResponse
	(*RegisterPlayCompletionRequest)(nil),  // 7: spage.core.RegisterPlayCompletionRequest
	(*RegisterPlayCompletionResponse)(nil), // 8: spage.core.RegisterPlayCompletionResponse
	(*PlayProgressUpdate)(nil),             // 9: spage.core.PlayProgressUpdate
	nil,                                    // 10: spage.core.ExecutePlayRequest.VariablesEntry
	nil,                                    // 11: spage.core.ExecutePlayRequest.MetadataEntry
	nil,                                    // 12: spage.core.RegisterPlayRequest.VariablesEntry
	nil,                                    // 13: spage.core.RegisterPlayRequest.MetadataEntry
	(*Error)(nil),                          // 14: spage.core.Error
	(*SpagePlay)(nil),                      // 15: spage.core.SpagePlay
	(PlayStatus)(0),                        // 16: spage.core.PlayStatus
	(*timestamppb.Timestamp)(nil),          // 17: google.protobuf.Timestamp
	(*CancelPlayRequest)(nil),              // 18: spage.core.CancelPlayRequest
	(*TaskProgressUpdate)(nil),             // 19: spage.core.TaskProgressUpdate
	(*emptypb.Empty)(nil),                  // 20: google.protobuf.Empty
	(*HealthStatus)(nil),                   // 21: spage.core.HealthStatus
}
var file_spage_core_play_execution_proto_depIdxs = []int32{
	10, // 0: spage.core.ExecutePlayRequest.variables:type_name -> spage.core.ExecutePlayRequest.VariablesEntry
	11, // 1: spage.core.ExecutePlayRequest.metadata:type_name -> spage.core.ExecutePlayRequest.MetadataEntry
	14, // 2: spage.core.ExecutePlayResponse.error:type_name -> spage.core.Error
	14, // 3: spage.core.CancelPlayResponse.error:type_name -> spage.core.Error
	15, // 4: spage.core.GetPlayStatusResponse.play:type_name -> spage.core.SpagePlay
	14, // 5: spage.core.GetPlayStatusResponse.error:type_name -> spage.core.Error
	12, // 6: spage.core.RegisterPlayRequest.variables:type_name -> spage.core.RegisterPlayRequest.VariablesEntry
	13, // 7: spage.core.RegisterPlayRequest.metadata:type_name -> spage.core.RegisterPlayRequest.MetadataEntry
	14, // 8: spage.core.RegisterPlayResponse.error:type_name -> spage.core.Error
	16, // 9: spage.core.RegisterPlayCompletionRequest.status:type_name -> spage.core.PlayStatus
	14, // 10: spage.core.RegisterPlayCompletionResponse.error:type_name -> spage.core.Error
	16, // 11: spage.core.PlayProgressUpdate.status:type_name -> spage.core.PlayStatus
	17, // 12: spage.core.PlayProgressUpdate.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 13: spage.core.SpageExecution.ExecutePlay:input_type -> spage.core.ExecutePlayRequest
	18, // 14: spage.core.SpageExecution.CancelPlay:input_type -> spage.core.CancelPlayRequest
	3,  // 15: spage.core.SpageExecution.GetPlayStatus:input_type -> spage.core.GetPlayStatusRequest
	5,  // 16: spage.core.SpageExecution.RegisterPlay:input_type -> spage.core.RegisterPlayRequest
	7,  // 17: spage.core.SpageExecution.RegisterPlayCompletion:input_type -> spage.core.RegisterPlayCompletionRequest
	19, // 18: spage.core.SpageExecution.StreamTaskProgress:input_type -> spage.core.TaskProgressUpdate
	9,  // 19: spage.core.SpageExecution.StreamPlayProgress:input_type -> spage.core.PlayProgressUpdate
	20, // 20: spage.core.SpageExecution.HealthCheck:input_type -> google.protobuf.Empty
	1,  // 21: spage.core.SpageExecution.ExecutePlay:output_type -> spage.core.ExecutePlayResponse
	2,  // 22: spage.core.SpageExecution.CancelPlay:output_type -> spage.core.CancelPlayResponse
	4,  // 23: spage.core.SpageExecution.GetPlayStatus:output_type -> spage.core.GetPlayStatusResponse
	6,  // 24: spage.core.SpageExecution.RegisterPlay:output_type -> spage.core.RegisterPlayResponse
	8,  // 25: spage.core.SpageExecution.RegisterPlayCompletion:output_type -> spage.core.RegisterPlayCompletionResponse
	19, // 26: spage.core.SpageExecution.StreamTaskProgress:output_type -> spage.core.TaskProgressUpdate
	9,  // 27: spage.core.SpageExecution.StreamPlayProgress:output_type -> spage.core.PlayProgressUpdate
	21, // 28: spage.core.SpageExecution.HealthCheck:output_type -> spage.core.HealthStatus
	21, // [21:29] is the sub-list for method output_type
	13, // [13:21] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_spage_core_play_execution_proto_init() }
func file_spage_core_play_execution_proto_init() {
	if File_spage_core_play_execution_proto != nil {
		return
	}
	file_spage_core_plays_proto_init()
	file_spage_core_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spage_core_play_execution_proto_rawDesc), len(file_spage_core_play_execution_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_spage_core_play_execution_proto_goTypes,
		DependencyIndexes: file_spage_core_play_execution_proto_depIdxs,
		MessageInfos:      file_spage_core_play_execution_proto_msgTypes,
	}.Build()
	File_spage_core_play_execution_proto = out.File
	file_spage_core_play_execution_proto_goTypes = nil
	file_spage_core_play_execution_proto_depIdxs = nil
}
